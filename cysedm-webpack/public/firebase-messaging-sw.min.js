importScripts('https://www.gstatic.com/firebasejs/4.1.2/firebase-app.js');
importScripts('https://www.gstatic.com/firebasejs/4.1.2/firebase-messaging.js');

if (firebase.apps.length > 0)
    firebase.messaging();

self.addEventListener('message', function (event) {
    if (firebase.apps.length === 0) {
        firebase.initializeApp(event.data);
        firebase.messaging();
    }

    event.ports[0].postMessage(event.data);
});
self.addEventListener('notificationclick', function (event) {
    const clickedNotification = event.notification;
    clickedNotification.close();

    const urlToOpen = new URL('/#/messages', self.location.origin).href;
    const promiseChain = clients.matchAll({
        type: 'window',
        includeUncontrolled: true
    })
        .then((windowClients) => {
            let matchingClient = null;

            for (let i = 0; i < windowClients.length; i++) {
                const windowClient = windowClients[i];
                if (windowClient.url === urlToOpen) {
                    matchingClient = windowClient;
                    break;
                }
            }
            if (matchingClient) {
                return matchingClient.focus();
            } else {
                return clients.openWindow(urlToOpen);
            }
        });
    function isClientFocused() {
        return clients.matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then((windowClients) => {
                let clientIsFocused = false;

                for (let i = 0; i < windowClients.length; i++) {
                    const windowClient = windowClients[i];
                    if (windowClient.focused) {
                        clientIsFocused = true;
                        break;
                    }
                }

                return clientIsFocused;
            });
    }
    const promiseChain2 = isClientFocused()
        .then((clientIsFocused) => {
            if (clientIsFocused) {
                console.log('Don\'t need to show a notification.');
                return;
            }

            // Client isn't focused, we need to show a notification.
            return self.registration.showNotification('Had to show a notification.');
        });

    event.waitUntil(promiseChain);
    event.waitUntil(promiseChain2);


    event.waitUntil(promiseChain);
});